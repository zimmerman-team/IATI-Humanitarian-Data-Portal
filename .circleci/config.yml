version: 2.1
jobs:
  #  CHECKOUT REPOSITORY
  checkout_repo:
    docker:
      - image: circleci/node:10.13.0
    working_directory: ~/mlt-frontend
    steps:
      - checkout
      - attach_workspace:
          at: ~/mlt-frontend
      - restore_cache:
          keys:
            - dep-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: dep-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./.cache
            - ./.cache/Cypress
      - persist_to_workspace:
          root: .
          paths:
            - .
            - ./.cache/Cypress

  #  BUILD SOURCE AND DEPLOY TO SERVER
  build_deploy:
    docker:
      - image: circleci/node:10.13.0-browsers
    working_directory: ~/mlt-frontend
    steps:
      - checkout
      - attach_workspace:
          at: ~/mlt-frontend
      - run: sudo apt-get install python-dev
      - run:
          name: Set REACT_APP_PROJECT_URL env var and production envs
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              echo 'export REACT_APP_PROJECT_URL="$REACT_APP_PROJECT_URL_STAGING"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              echo 'export REACT_APP_PROJECT_URL="$REACT_APP_PROJECT_URL_TEST"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
              echo 'export REACT_APP_PROJECT_URL="$REACT_APP_PROJECT_URL_DEV"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo 'export REACT_APP_PROJECT_URL="$REACT_APP_PROJECT_URL_PROD"' >> $BASH_ENV
              echo 'export REACT_APP_CLIENT_NAME="Humanitarian Portal"' >> $BASH_ENV
              echo 'export REACT_APP_CMS_API="$REACT_APP_CMS_API_PROD"' >> $BASH_ENV
              echo 'export REACT_APP_DS_API="$REACT_APP_DS_API_PROD"' >> $BASH_ENV
              echo 'export REACT_APP_CMS_PROJECT_ID="$REACT_APP_CMS_PROJECT_ID_PROD"' >> $BASH_ENV
            else
              echo 'export REACT_APP_PROJECT_URL="$REACT_APP_PROJECT_URL_DEV"' >> $BASH_ENV
            fi
            source $BASH_ENV
      - run:
          name: Check if master and build
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
               yarn build:production
            else
               yarn build
            fi
      - run:
          name: Check if staging and build storybook
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
               yarn build-storybook
            fi
      - run:
          name: Add target host to known_hosts files
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                ssh-keyscan "$PROD_SSH_HOST" >> ~/.ssh/known_hosts
            else
                ssh-keyscan "$SSH_HOST" >> ~/.ssh/known_hosts
            fi
      - add_ssh_keys:
          name: Add SSH KEY
          fingerprints:
            - $FINGERPRINT
      - run: eval ssh-agent -s
      - run: sudo apt install rsync
      - run:
          name: Upload build folder to target host
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              rsync -O -ave ssh ~/mlt-frontend/build/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/staging/build
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              rsync -O -ave ssh ~/mlt-frontend/build/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/test/build
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
              rsync -O -ave ssh ~/mlt-frontend/build/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/dev/build
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              rsync -O -ave ssh ~/mlt-frontend/build/ "$PROD_SSH_USER"@"$PROD_SSH_HOST":~/mlt-frontend/build
            else
              rsync -O -ave ssh ~/mlt-frontend/build/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/dev/build
            fi
      - run:
          name: Upload storybook build folder to target host
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              rsync -O -ave ssh ~/mlt-frontend/.out/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/staging/build-storybook
            fi

  #  RUN CYPRESS END TO END TESTS
  test_e2e:
    docker:
      - image: circleci/node:10.13.0-browsers
    parallelism: 2
    working_directory: ~/mlt-frontend
    steps:
      - checkout
      - attach_workspace:
          at: ~/mlt-frontend
      # setting this env var to only test on dev server when deployed.
      - run:
          name: Install Cypress -> OPTIMISE, UNESCESSARY STEP!!!
          command: yarn add cypress --ignore-engines
      - run:
          name: Set CYPRESS_BASEURL
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
               echo 'export CYPRESS_baseUrl="$REACT_APP_PROJECT_URL_STAGING"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
               echo 'export CYPRESS_baseUrl="$REACT_APP_PROJECT_URL_TEST"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
               echo 'export CYPRESS_baseUrl="$REACT_APP_PROJECT_URL_DEV"' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
               echo 'export CYPRESS_baseUrl="$REACT_APP_PROJECT_URL_PROD"' >> $BASH_ENV
               echo 'export REACT_APP_CLIENT_NAME="Humanitarian Portal"' >> $BASH_ENV
               echo 'export REACT_APP_CMS_API="$REACT_APP_CMS_API_PROD"' >> $BASH_ENV
               echo 'export REACT_APP_DS_API="$REACT_APP_DS_API_PROD"' >> $BASH_ENV
               echo 'export REACT_APP_CMS_PROJECT_ID="$REACT_APP_CMS_PROJECT_ID_PROD"' >> $BASH_ENV
            else
               echo 'export CYPRESS_baseUrl="$REACT_APP_PROJECT_URL_DEV"' >> $BASH_ENV
            fi
            source $BASH_ENV
      - run:
          name: Run E2E test
          # Here we check if the bash variable is unset, or set to a empty string
          command: |
            yarn cy:run:record:parallel
      - store_test_results:
          path: test_results

  #  RUN LIGHTHOUSE PERFORMANCE TESTS
  performance_test:
    parallelism: 2
    docker:
      - image: femtopixel/google-lighthouse
    steps:
      - checkout
      - run:
          name: Run lighthouse against deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
               lighthouse "$REACT_APP_PROJECT_URL_STAGING" \
                --port=9222 \
                      --chrome-flags=\"--headless\" \
                      --output-path=/home/chrome/reports/anonymous-"$(echo -n $CIRCLE_SHELL_ENV | md5sum | awk '{print $1}')"-$(date +'%Y-%m-%d') \
                      --output=json \
                      --output=html
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
                lighthouse "$REACT_APP_PROJECT_URL_TEST" \
                 --port=9222 \
                      --chrome-flags=\"--headless\" \
                      --output-path=/home/chrome/reports/anonymous-"$(echo -n $CIRCLE_SHELL_ENV | md5sum | awk '{print $1}')"-$(date +'%Y-%m-%d') \
                      --output=json \
                      --output=html
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
                 lighthouse "$REACT_APP_PROJECT_URL_DEV" \
                  --port=9222 \
                      --chrome-flags=\"--headless\" \
                      --output-path=/home/chrome/reports/anonymous-"$(echo -n $CIRCLE_SHELL_ENV | md5sum | awk '{print $1}')"-$(date +'%Y-%m-%d') \
                      --output=json \
                      --output=html
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                  lighthouse "$REACT_APP_PROJECT_URL_PROD" \
                  --port=9222 \
                      --chrome-flags=\"--headless\" \
                      --output-path=/home/chrome/reports/anonymous-"$(echo -n $CIRCLE_SHELL_ENV | md5sum | awk '{print $1}')"-$(date +'%Y-%m-%d') \
                      --output=json \
                      --output=html
            else
                  lighthouse "$REACT_APP_PROJECT_URL_DEV" \
                   --port=9222 \
                      --chrome-flags=\"--headless\" \
                      --output-path=/home/chrome/reports/anonymous-"$(echo -n $CIRCLE_SHELL_ENV | md5sum | awk '{print $1}')"-$(date +'%Y-%m-%d') \
                      --output=json \
                      --output=html
            fi
      - persist_to_workspace:
          root: /home/chrome
          paths:
            - reports

  #  CREATE GITHUB REPORT AND SEND REPORT TO SERVER
  process_performance_test_results:
    docker:
      - image: circleci/node:10.13.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: "."
      - store_artifacts:
          path: reports
          destination: reports
      - run:
          name: Add target host to known_hosts files
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                ssh-keyscan "$PROD_SSH_HOST" >> ~/.ssh/known_hosts
            else
                ssh-keyscan "$SSH_HOST" >> ~/.ssh/known_hosts
            fi
      - add_ssh_keys:
          name: Add SSH KEY
          fingerprints:
            - $FINGERPRINT
      - run: eval ssh-agent -s
      - run: sudo apt install rsync
      - run:
          name: Send report files to droplet
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                rsync -O -ave ssh ./reports/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/staging/lighthouse-reports
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
                rsync -O -ave ssh ./reports/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/test/lighthouse-reports
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
                rsync -O -ave ssh ./reports/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/dev/lighthouse-reports
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                rsync -O -ave ssh ./reports/ "$PROD_SSH_USER"@"$PROD_SSH_HOST":~/mlt-frontend/lighthouse-reports
            else
                rsync -O -ave ssh ./reports/ "$SSH_USER"@"$SSH_HOST":~/mlt-apps/dev/lighthouse-reports
            fi
      - run:
          name: Analyze and report desired vs actual lighthouse scores
          command: ./scripts/analyze_scores.js package.json reports

# WORKFLOWS
workflows:
  version: 2
  checkout_build_deploy_test:
    jobs:
      - checkout_repo
      - build_deploy:
          requires:
            - checkout_repo
      - test_e2e:
          requires:
            - build_deploy
#      - performance_test:
#          requires:
#            - build_deploy
#      - process_performance_test_results:
#          requires:
#            - performance_test
